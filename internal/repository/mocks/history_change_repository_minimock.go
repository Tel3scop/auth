// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/Tel3scop/auth/internal/repository.HistoryChangeRepository -o history_change_repository_minimock.go -n HistoryChangeRepositoryMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/Tel3scop/auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// HistoryChangeRepositoryMock implements repository.HistoryChangeRepository
type HistoryChangeRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreate          func(ctx context.Context, dto model.HistoryChange) (i1 int64, err error)
	inspectFuncCreate   func(ctx context.Context, dto model.HistoryChange)
	afterCreateCounter  uint64
	beforeCreateCounter uint64
	CreateMock          mHistoryChangeRepositoryMockCreate
}

// NewHistoryChangeRepositoryMock returns a mock for repository.HistoryChangeRepository
func NewHistoryChangeRepositoryMock(t minimock.Tester) *HistoryChangeRepositoryMock {
	m := &HistoryChangeRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateMock = mHistoryChangeRepositoryMockCreate{mock: m}
	m.CreateMock.callArgs = []*HistoryChangeRepositoryMockCreateParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mHistoryChangeRepositoryMockCreate struct {
	mock               *HistoryChangeRepositoryMock
	defaultExpectation *HistoryChangeRepositoryMockCreateExpectation
	expectations       []*HistoryChangeRepositoryMockCreateExpectation

	callArgs []*HistoryChangeRepositoryMockCreateParams
	mutex    sync.RWMutex
}

// HistoryChangeRepositoryMockCreateExpectation specifies expectation struct of the HistoryChangeRepository.Create
type HistoryChangeRepositoryMockCreateExpectation struct {
	mock    *HistoryChangeRepositoryMock
	params  *HistoryChangeRepositoryMockCreateParams
	results *HistoryChangeRepositoryMockCreateResults
	Counter uint64
}

// HistoryChangeRepositoryMockCreateParams contains parameters of the HistoryChangeRepository.Create
type HistoryChangeRepositoryMockCreateParams struct {
	ctx context.Context
	dto model.HistoryChange
}

// HistoryChangeRepositoryMockCreateResults contains results of the HistoryChangeRepository.Create
type HistoryChangeRepositoryMockCreateResults struct {
	i1  int64
	err error
}

// Expect sets up expected params for HistoryChangeRepository.Create
func (mmCreate *mHistoryChangeRepositoryMockCreate) Expect(ctx context.Context, dto model.HistoryChange) *mHistoryChangeRepositoryMockCreate {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("HistoryChangeRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &HistoryChangeRepositoryMockCreateExpectation{}
	}

	mmCreate.defaultExpectation.params = &HistoryChangeRepositoryMockCreateParams{ctx, dto}
	for _, e := range mmCreate.expectations {
		if minimock.Equal(e.params, mmCreate.defaultExpectation.params) {
			mmCreate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreate.defaultExpectation.params)
		}
	}

	return mmCreate
}

// Inspect accepts an inspector function that has same arguments as the HistoryChangeRepository.Create
func (mmCreate *mHistoryChangeRepositoryMockCreate) Inspect(f func(ctx context.Context, dto model.HistoryChange)) *mHistoryChangeRepositoryMockCreate {
	if mmCreate.mock.inspectFuncCreate != nil {
		mmCreate.mock.t.Fatalf("Inspect function is already set for HistoryChangeRepositoryMock.Create")
	}

	mmCreate.mock.inspectFuncCreate = f

	return mmCreate
}

// Return sets up results that will be returned by HistoryChangeRepository.Create
func (mmCreate *mHistoryChangeRepositoryMockCreate) Return(i1 int64, err error) *HistoryChangeRepositoryMock {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("HistoryChangeRepositoryMock.Create mock is already set by Set")
	}

	if mmCreate.defaultExpectation == nil {
		mmCreate.defaultExpectation = &HistoryChangeRepositoryMockCreateExpectation{mock: mmCreate.mock}
	}
	mmCreate.defaultExpectation.results = &HistoryChangeRepositoryMockCreateResults{i1, err}
	return mmCreate.mock
}

// Set uses given function f to mock the HistoryChangeRepository.Create method
func (mmCreate *mHistoryChangeRepositoryMockCreate) Set(f func(ctx context.Context, dto model.HistoryChange) (i1 int64, err error)) *HistoryChangeRepositoryMock {
	if mmCreate.defaultExpectation != nil {
		mmCreate.mock.t.Fatalf("Default expectation is already set for the HistoryChangeRepository.Create method")
	}

	if len(mmCreate.expectations) > 0 {
		mmCreate.mock.t.Fatalf("Some expectations are already set for the HistoryChangeRepository.Create method")
	}

	mmCreate.mock.funcCreate = f
	return mmCreate.mock
}

// When sets expectation for the HistoryChangeRepository.Create which will trigger the result defined by the following
// Then helper
func (mmCreate *mHistoryChangeRepositoryMockCreate) When(ctx context.Context, dto model.HistoryChange) *HistoryChangeRepositoryMockCreateExpectation {
	if mmCreate.mock.funcCreate != nil {
		mmCreate.mock.t.Fatalf("HistoryChangeRepositoryMock.Create mock is already set by Set")
	}

	expectation := &HistoryChangeRepositoryMockCreateExpectation{
		mock:   mmCreate.mock,
		params: &HistoryChangeRepositoryMockCreateParams{ctx, dto},
	}
	mmCreate.expectations = append(mmCreate.expectations, expectation)
	return expectation
}

// Then sets up HistoryChangeRepository.Create return parameters for the expectation previously defined by the When method
func (e *HistoryChangeRepositoryMockCreateExpectation) Then(i1 int64, err error) *HistoryChangeRepositoryMock {
	e.results = &HistoryChangeRepositoryMockCreateResults{i1, err}
	return e.mock
}

// Create implements repository.HistoryChangeRepository
func (mmCreate *HistoryChangeRepositoryMock) Create(ctx context.Context, dto model.HistoryChange) (i1 int64, err error) {
	mm_atomic.AddUint64(&mmCreate.beforeCreateCounter, 1)
	defer mm_atomic.AddUint64(&mmCreate.afterCreateCounter, 1)

	if mmCreate.inspectFuncCreate != nil {
		mmCreate.inspectFuncCreate(ctx, dto)
	}

	mm_params := HistoryChangeRepositoryMockCreateParams{ctx, dto}

	// Record call args
	mmCreate.CreateMock.mutex.Lock()
	mmCreate.CreateMock.callArgs = append(mmCreate.CreateMock.callArgs, &mm_params)
	mmCreate.CreateMock.mutex.Unlock()

	for _, e := range mmCreate.CreateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.i1, e.results.err
		}
	}

	if mmCreate.CreateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreate.CreateMock.defaultExpectation.Counter, 1)
		mm_want := mmCreate.CreateMock.defaultExpectation.params
		mm_got := HistoryChangeRepositoryMockCreateParams{ctx, dto}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreate.t.Errorf("HistoryChangeRepositoryMock.Create got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreate.CreateMock.defaultExpectation.results
		if mm_results == nil {
			mmCreate.t.Fatal("No results are set for the HistoryChangeRepositoryMock.Create")
		}
		return (*mm_results).i1, (*mm_results).err
	}
	if mmCreate.funcCreate != nil {
		return mmCreate.funcCreate(ctx, dto)
	}
	mmCreate.t.Fatalf("Unexpected call to HistoryChangeRepositoryMock.Create. %v %v", ctx, dto)
	return
}

// CreateAfterCounter returns a count of finished HistoryChangeRepositoryMock.Create invocations
func (mmCreate *HistoryChangeRepositoryMock) CreateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.afterCreateCounter)
}

// CreateBeforeCounter returns a count of HistoryChangeRepositoryMock.Create invocations
func (mmCreate *HistoryChangeRepositoryMock) CreateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreate.beforeCreateCounter)
}

// Calls returns a list of arguments used in each call to HistoryChangeRepositoryMock.Create.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreate *mHistoryChangeRepositoryMockCreate) Calls() []*HistoryChangeRepositoryMockCreateParams {
	mmCreate.mutex.RLock()

	argCopy := make([]*HistoryChangeRepositoryMockCreateParams, len(mmCreate.callArgs))
	copy(argCopy, mmCreate.callArgs)

	mmCreate.mutex.RUnlock()

	return argCopy
}

// MinimockCreateDone returns true if the count of the Create invocations corresponds
// the number of defined expectations
func (m *HistoryChangeRepositoryMock) MinimockCreateDone() bool {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		return false
	}
	return true
}

// MinimockCreateInspect logs each unmet expectation
func (m *HistoryChangeRepositoryMock) MinimockCreateInspect() {
	for _, e := range m.CreateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to HistoryChangeRepositoryMock.Create with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CreateMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		if m.CreateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to HistoryChangeRepositoryMock.Create")
		} else {
			m.t.Errorf("Expected call to HistoryChangeRepositoryMock.Create with params: %#v", *m.CreateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreate != nil && mm_atomic.LoadUint64(&m.afterCreateCounter) < 1 {
		m.t.Error("Expected call to HistoryChangeRepositoryMock.Create")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *HistoryChangeRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *HistoryChangeRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *HistoryChangeRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateDone()
}
